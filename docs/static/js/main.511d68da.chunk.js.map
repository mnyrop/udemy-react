{"version":3,"sources":["Person/Person.js","App.js","serviceWorker.js","index.js"],"names":["Radium","props","react_default","a","createElement","className","style","@media (min-width: 500px)","width","onClick","click","name","age","children","type","onChange","changed","value","App","state","persons","id","showPersons","deletePersonHandler","personIndex","Object","toConsumableArray","_this","splice","setState","togglePersonsHandler","show","nameChangedHandler","event","findIndex","p","person","objectSpread","target","_this2","this","buttonStyle","backgroundColor","color","font","padding","cursor","margin",":hover","map","index","Person_Person","key","classes","length","push","style_root","join","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.511d68da.chunk.js","sourcesContent":["import React from 'react'\nimport Radium from 'radium'\nimport './Person.css';\n\nconst person = (props) => {\n  const personStyle = {\n    '@media (min-width: 500px)': {\n      width: '450px'\n    }\n  };\n\n  return (\n    <div className=\"Person\" style={personStyle}>\n      <p onClick={props.click}>I am {props.name} and I am {props.age} years old.</p>\n      <p>{props.children}</p>\n      <input type='text' onChange={props.changed} value={props.name}/>\n    </div>\n  );\n};\n\nexport default Radium(person);\n","import React, { Component } from 'react';\nimport Radium, { StyleRoot } from 'radium';\nimport Person from './Person/Person'\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: '00', name: 'Max', age: 28 },\n      { id: '01', name: 'Manu', age: 29 },\n      { id: '02', name: 'Stephanie', age: 26 }\n    ],\n    showPersons: false\n  }\n\n  deletePersonHandler = (personIndex) => {\n    const persons = [...this.state.persons];\n    persons.splice(personIndex, 1);\n    this.setState({persons: persons});\n  }\n\n  togglePersonsHandler = () => {\n    const show = this.state.showPersons;\n    this.setState({showPersons: !show});\n  }\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n    const person = {...this.state.persons[personIndex]}\n    const persons = [...this.state.persons];\n\n    person.name = event.target.value;\n    persons[personIndex] = person;\n\n    this.setState({persons: persons});\n  }\n\n  render() {\n    const buttonStyle = {\n      backgroundColor:  'green',\n      color:            'white',\n      font:             'inherit',\n      padding:          '8px',\n      cursor:           'pointer',\n      margin:           '10px',\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n\n    let persons = null;\n\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return <Person\n              click={() => this.deletePersonHandler(index)}\n              name={person.name}\n              age={person.age}\n              key={person.id}\n              changed={(event) => this.nameChangedHandler(event, person.id)} />\n          })}\n        </div>\n      );\n\n      buttonStyle.backgroundColor = 'red';\n      buttonStyle[':hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      }\n    }\n\n    const classes = [];\n    if (this.state.persons.length <= 2) {\n      classes.push('red');\n    }\n    if (this.state.persons.length <=1 ) {\n      classes.push('bold');\n    }\n\n    return (\n      <StyleRoot>\n        <div className=\"App\">\n          <h1>Hi, I'm a React App.</h1>\n          <p className={classes.join(' ')}>This is really working</p>\n          <button\n            style={buttonStyle}\n            onClick={this.togglePersonsHandler}>Toggle Persons</button>\n          {persons}\n        </div>\n      </StyleRoot>\n    );\n  }\n}\n\nexport default Radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}